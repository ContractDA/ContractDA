
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLPARENRPARENleftANDORIMPLYNOTleftGEGTLTLEEQNEQleftADDSUBleftMULDIVleftPOWERADD AND COMMENT CONSTANT DIV EQ EXIST FALSE FORALL GE GT IMPLY LAND LE LITERAL LOR LPAREN LT MUL NEQ NOT OR POWER RPAREN SUB TRUEproposition : NOT propositionproposition : expression GE expression\n                   | expression GT expression\n                   | expression LT expression\n                   | expression LE expression        \n                   | expression EQ expression\n                   | expression NEQ expression    \n                   | proposition AND proposition   \n                   | proposition OR proposition   \n                   | proposition IMPLY propositionproposition : LPAREN proposition RPARENproposition : TRUE\n                       | FALSE   expression : expression ADD expression\n                   | expression SUB expression\n                   | expression MUL expression\n                   | expression DIV expression\n                   | expression POWER expressionexpression : constant\n                      | symbolexpression : LPAREN expression RPARENsymbol : LITERALconstant : CONSTANT'
    
_lr_action_items = {'NOT':([0,2,4,11,12,13,],[2,2,2,2,2,2,]),'LPAREN':([0,2,4,11,12,13,15,16,17,18,19,20,21,22,23,24,25,32,],[4,4,4,4,4,4,32,32,32,32,32,32,32,32,32,32,32,32,]),'TRUE':([0,2,4,11,12,13,],[5,5,5,5,5,5,]),'FALSE':([0,2,4,11,12,13,],[6,6,6,6,6,6,]),'CONSTANT':([0,2,4,11,12,13,15,16,17,18,19,20,21,22,23,24,25,32,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'LITERAL':([0,2,4,11,12,13,15,16,17,18,19,20,21,22,23,24,25,32,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'$end':([1,5,6,7,8,9,10,14,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,],[0,-12,-13,-19,-20,-23,-22,-1,-8,-9,-10,-2,-3,-4,-5,-6,-7,-14,-15,-16,-17,-18,-11,-21,]),'AND':([1,5,6,7,8,9,10,14,26,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,],[11,-12,-13,-19,-20,-23,-22,-1,11,-8,-9,-10,-2,-3,-4,-5,-6,-7,-14,-15,-16,-17,-18,-11,-21,]),'OR':([1,5,6,7,8,9,10,14,26,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,],[12,-12,-13,-19,-20,-23,-22,-1,12,-8,-9,-10,-2,-3,-4,-5,-6,-7,-14,-15,-16,-17,-18,-11,-21,]),'IMPLY':([1,5,6,7,8,9,10,14,26,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,],[13,-12,-13,-19,-20,-23,-22,-1,13,-8,-9,-10,-2,-3,-4,-5,-6,-7,-14,-15,-16,-17,-18,-11,-21,]),'GE':([3,7,8,9,10,27,38,39,40,41,42,44,],[15,-19,-20,-23,-22,15,-14,-15,-16,-17,-18,-21,]),'GT':([3,7,8,9,10,27,38,39,40,41,42,44,],[16,-19,-20,-23,-22,16,-14,-15,-16,-17,-18,-21,]),'LT':([3,7,8,9,10,27,38,39,40,41,42,44,],[17,-19,-20,-23,-22,17,-14,-15,-16,-17,-18,-21,]),'LE':([3,7,8,9,10,27,38,39,40,41,42,44,],[18,-19,-20,-23,-22,18,-14,-15,-16,-17,-18,-21,]),'EQ':([3,7,8,9,10,27,38,39,40,41,42,44,],[19,-19,-20,-23,-22,19,-14,-15,-16,-17,-18,-21,]),'NEQ':([3,7,8,9,10,27,38,39,40,41,42,44,],[20,-19,-20,-23,-22,20,-14,-15,-16,-17,-18,-21,]),'ADD':([3,7,8,9,10,27,31,33,34,35,36,37,38,39,40,41,42,44,45,],[21,-19,-20,-23,-22,21,21,21,21,21,21,21,-14,-15,-16,-17,-18,-21,21,]),'SUB':([3,7,8,9,10,27,31,33,34,35,36,37,38,39,40,41,42,44,45,],[22,-19,-20,-23,-22,22,22,22,22,22,22,22,-14,-15,-16,-17,-18,-21,22,]),'MUL':([3,7,8,9,10,27,31,33,34,35,36,37,38,39,40,41,42,44,45,],[23,-19,-20,-23,-22,23,23,23,23,23,23,23,23,23,-16,-17,-18,-21,23,]),'DIV':([3,7,8,9,10,27,31,33,34,35,36,37,38,39,40,41,42,44,45,],[24,-19,-20,-23,-22,24,24,24,24,24,24,24,24,24,-16,-17,-18,-21,24,]),'POWER':([3,7,8,9,10,27,31,33,34,35,36,37,38,39,40,41,42,44,45,],[25,-19,-20,-23,-22,25,25,25,25,25,25,25,25,25,25,25,-18,-21,25,]),'RPAREN':([5,6,7,8,9,10,14,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,],[-12,-13,-19,-20,-23,-22,-1,43,44,-8,-9,-10,-2,-3,-4,-5,-6,-7,-14,-15,-16,-17,-18,-11,-21,44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'proposition':([0,2,4,11,12,13,],[1,14,26,28,29,30,]),'expression':([0,2,4,11,12,13,15,16,17,18,19,20,21,22,23,24,25,32,],[3,3,27,3,3,3,31,33,34,35,36,37,38,39,40,41,42,45,]),'constant':([0,2,4,11,12,13,15,16,17,18,19,20,21,22,23,24,25,32,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'symbol':([0,2,4,11,12,13,15,16,17,18,19,20,21,22,23,24,25,32,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> proposition","S'",1,None,None,None),
  ('proposition -> NOT proposition','proposition',2,'p_proposition_uniop','_fol_parser.py',121),
  ('proposition -> expression GE expression','proposition',3,'p_proposition_binop','_fol_parser.py',125),
  ('proposition -> expression GT expression','proposition',3,'p_proposition_binop','_fol_parser.py',126),
  ('proposition -> expression LT expression','proposition',3,'p_proposition_binop','_fol_parser.py',127),
  ('proposition -> expression LE expression','proposition',3,'p_proposition_binop','_fol_parser.py',128),
  ('proposition -> expression EQ expression','proposition',3,'p_proposition_binop','_fol_parser.py',129),
  ('proposition -> expression NEQ expression','proposition',3,'p_proposition_binop','_fol_parser.py',130),
  ('proposition -> proposition AND proposition','proposition',3,'p_proposition_binop','_fol_parser.py',131),
  ('proposition -> proposition OR proposition','proposition',3,'p_proposition_binop','_fol_parser.py',132),
  ('proposition -> proposition IMPLY proposition','proposition',3,'p_proposition_binop','_fol_parser.py',133),
  ('proposition -> LPAREN proposition RPAREN','proposition',3,'p_proposition_paren','_fol_parser.py',136),
  ('proposition -> TRUE','proposition',1,'p_proposition_literal','_fol_parser.py',140),
  ('proposition -> FALSE','proposition',1,'p_proposition_literal','_fol_parser.py',141),
  ('expression -> expression ADD expression','expression',3,'p_expression_binop','_fol_parser.py',145),
  ('expression -> expression SUB expression','expression',3,'p_expression_binop','_fol_parser.py',146),
  ('expression -> expression MUL expression','expression',3,'p_expression_binop','_fol_parser.py',147),
  ('expression -> expression DIV expression','expression',3,'p_expression_binop','_fol_parser.py',148),
  ('expression -> expression POWER expression','expression',3,'p_expression_binop','_fol_parser.py',149),
  ('expression -> constant','expression',1,'p_expression_literal','_fol_parser.py',154),
  ('expression -> symbol','expression',1,'p_expression_literal','_fol_parser.py',155),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','_fol_parser.py',159),
  ('symbol -> LITERAL','symbol',1,'p_symbol','_fol_parser.py',163),
  ('constant -> CONSTANT','constant',1,'p_constant','_fol_parser.py',172),
]
