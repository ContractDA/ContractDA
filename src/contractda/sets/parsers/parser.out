Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    EXIST
    FORALL
    LAND
    LOR

Grammar

Rule 0     S' -> proposition
Rule 1     proposition -> NOT proposition
Rule 2     proposition -> expression GE expression
Rule 3     proposition -> expression GT expression
Rule 4     proposition -> expression LT expression
Rule 5     proposition -> expression LE expression
Rule 6     proposition -> expression EQ expression
Rule 7     proposition -> expression NEQ expression
Rule 8     proposition -> proposition AND proposition
Rule 9     proposition -> proposition OR proposition
Rule 10    proposition -> proposition IMPLY proposition
Rule 11    proposition -> LPAREN proposition RPAREN
Rule 12    proposition -> TRUE
Rule 13    proposition -> FALSE
Rule 14    expression -> expression ADD expression
Rule 15    expression -> expression SUB expression
Rule 16    expression -> expression MUL expression
Rule 17    expression -> expression DIV expression
Rule 18    expression -> expression POWER expression
Rule 19    expression -> constant
Rule 20    expression -> symbol
Rule 21    expression -> LPAREN expression RPAREN
Rule 22    symbol -> LITERAL
Rule 23    constant -> CONSTANT

Terminals, with rules where they appear

ADD                  : 14
AND                  : 8
COMMENT              : 
CONSTANT             : 23
DIV                  : 17
EQ                   : 6
EXIST                : 
FALSE                : 13
FORALL               : 
GE                   : 2
GT                   : 3
IMPLY                : 10
LAND                 : 
LE                   : 5
LITERAL              : 22
LOR                  : 
LPAREN               : 11 21
LT                   : 4
MUL                  : 16
NEQ                  : 7
NOT                  : 1
OR                   : 9
POWER                : 18
RPAREN               : 11 21
SUB                  : 15
TRUE                 : 12
error                : 

Nonterminals, with rules where they appear

constant             : 19
expression           : 2 2 3 3 4 4 5 5 6 6 7 7 14 14 15 15 16 16 17 17 18 18 21
proposition          : 1 8 8 9 9 10 10 11 0
symbol               : 20

Parsing method: LALR

state 0

    (0) S' -> . proposition
    (1) proposition -> . NOT proposition
    (2) proposition -> . expression GE expression
    (3) proposition -> . expression GT expression
    (4) proposition -> . expression LT expression
    (5) proposition -> . expression LE expression
    (6) proposition -> . expression EQ expression
    (7) proposition -> . expression NEQ expression
    (8) proposition -> . proposition AND proposition
    (9) proposition -> . proposition OR proposition
    (10) proposition -> . proposition IMPLY proposition
    (11) proposition -> . LPAREN proposition RPAREN
    (12) proposition -> . TRUE
    (13) proposition -> . FALSE
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression POWER expression
    (19) expression -> . constant
    (20) expression -> . symbol
    (21) expression -> . LPAREN expression RPAREN
    (23) constant -> . CONSTANT
    (22) symbol -> . LITERAL

    NOT             shift and go to state 2
    LPAREN          shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    proposition                    shift and go to state 1
    expression                     shift and go to state 3
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 1

    (0) S' -> proposition .
    (8) proposition -> proposition . AND proposition
    (9) proposition -> proposition . OR proposition
    (10) proposition -> proposition . IMPLY proposition

    AND             shift and go to state 11
    OR              shift and go to state 12
    IMPLY           shift and go to state 13


state 2

    (1) proposition -> NOT . proposition
    (1) proposition -> . NOT proposition
    (2) proposition -> . expression GE expression
    (3) proposition -> . expression GT expression
    (4) proposition -> . expression LT expression
    (5) proposition -> . expression LE expression
    (6) proposition -> . expression EQ expression
    (7) proposition -> . expression NEQ expression
    (8) proposition -> . proposition AND proposition
    (9) proposition -> . proposition OR proposition
    (10) proposition -> . proposition IMPLY proposition
    (11) proposition -> . LPAREN proposition RPAREN
    (12) proposition -> . TRUE
    (13) proposition -> . FALSE
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression POWER expression
    (19) expression -> . constant
    (20) expression -> . symbol
    (21) expression -> . LPAREN expression RPAREN
    (23) constant -> . CONSTANT
    (22) symbol -> . LITERAL

    NOT             shift and go to state 2
    LPAREN          shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    proposition                    shift and go to state 14
    expression                     shift and go to state 3
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 3

    (2) proposition -> expression . GE expression
    (3) proposition -> expression . GT expression
    (4) proposition -> expression . LT expression
    (5) proposition -> expression . LE expression
    (6) proposition -> expression . EQ expression
    (7) proposition -> expression . NEQ expression
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . POWER expression

    GE              shift and go to state 15
    GT              shift and go to state 16
    LT              shift and go to state 17
    LE              shift and go to state 18
    EQ              shift and go to state 19
    NEQ             shift and go to state 20
    ADD             shift and go to state 21
    SUB             shift and go to state 22
    MUL             shift and go to state 23
    DIV             shift and go to state 24
    POWER           shift and go to state 25


state 4

    (11) proposition -> LPAREN . proposition RPAREN
    (21) expression -> LPAREN . expression RPAREN
    (1) proposition -> . NOT proposition
    (2) proposition -> . expression GE expression
    (3) proposition -> . expression GT expression
    (4) proposition -> . expression LT expression
    (5) proposition -> . expression LE expression
    (6) proposition -> . expression EQ expression
    (7) proposition -> . expression NEQ expression
    (8) proposition -> . proposition AND proposition
    (9) proposition -> . proposition OR proposition
    (10) proposition -> . proposition IMPLY proposition
    (11) proposition -> . LPAREN proposition RPAREN
    (12) proposition -> . TRUE
    (13) proposition -> . FALSE
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression POWER expression
    (19) expression -> . constant
    (20) expression -> . symbol
    (21) expression -> . LPAREN expression RPAREN
    (23) constant -> . CONSTANT
    (22) symbol -> . LITERAL

    NOT             shift and go to state 2
    LPAREN          shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    proposition                    shift and go to state 26
    expression                     shift and go to state 27
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 5

    (12) proposition -> TRUE .

    AND             reduce using rule 12 (proposition -> TRUE .)
    OR              reduce using rule 12 (proposition -> TRUE .)
    IMPLY           reduce using rule 12 (proposition -> TRUE .)
    $end            reduce using rule 12 (proposition -> TRUE .)
    RPAREN          reduce using rule 12 (proposition -> TRUE .)


state 6

    (13) proposition -> FALSE .

    AND             reduce using rule 13 (proposition -> FALSE .)
    OR              reduce using rule 13 (proposition -> FALSE .)
    IMPLY           reduce using rule 13 (proposition -> FALSE .)
    $end            reduce using rule 13 (proposition -> FALSE .)
    RPAREN          reduce using rule 13 (proposition -> FALSE .)


state 7

    (19) expression -> constant .

    GE              reduce using rule 19 (expression -> constant .)
    GT              reduce using rule 19 (expression -> constant .)
    LT              reduce using rule 19 (expression -> constant .)
    LE              reduce using rule 19 (expression -> constant .)
    EQ              reduce using rule 19 (expression -> constant .)
    NEQ             reduce using rule 19 (expression -> constant .)
    ADD             reduce using rule 19 (expression -> constant .)
    SUB             reduce using rule 19 (expression -> constant .)
    MUL             reduce using rule 19 (expression -> constant .)
    DIV             reduce using rule 19 (expression -> constant .)
    POWER           reduce using rule 19 (expression -> constant .)
    RPAREN          reduce using rule 19 (expression -> constant .)
    AND             reduce using rule 19 (expression -> constant .)
    OR              reduce using rule 19 (expression -> constant .)
    IMPLY           reduce using rule 19 (expression -> constant .)
    $end            reduce using rule 19 (expression -> constant .)


state 8

    (20) expression -> symbol .

    GE              reduce using rule 20 (expression -> symbol .)
    GT              reduce using rule 20 (expression -> symbol .)
    LT              reduce using rule 20 (expression -> symbol .)
    LE              reduce using rule 20 (expression -> symbol .)
    EQ              reduce using rule 20 (expression -> symbol .)
    NEQ             reduce using rule 20 (expression -> symbol .)
    ADD             reduce using rule 20 (expression -> symbol .)
    SUB             reduce using rule 20 (expression -> symbol .)
    MUL             reduce using rule 20 (expression -> symbol .)
    DIV             reduce using rule 20 (expression -> symbol .)
    POWER           reduce using rule 20 (expression -> symbol .)
    RPAREN          reduce using rule 20 (expression -> symbol .)
    AND             reduce using rule 20 (expression -> symbol .)
    OR              reduce using rule 20 (expression -> symbol .)
    IMPLY           reduce using rule 20 (expression -> symbol .)
    $end            reduce using rule 20 (expression -> symbol .)


state 9

    (23) constant -> CONSTANT .

    GE              reduce using rule 23 (constant -> CONSTANT .)
    GT              reduce using rule 23 (constant -> CONSTANT .)
    LT              reduce using rule 23 (constant -> CONSTANT .)
    LE              reduce using rule 23 (constant -> CONSTANT .)
    EQ              reduce using rule 23 (constant -> CONSTANT .)
    NEQ             reduce using rule 23 (constant -> CONSTANT .)
    ADD             reduce using rule 23 (constant -> CONSTANT .)
    SUB             reduce using rule 23 (constant -> CONSTANT .)
    MUL             reduce using rule 23 (constant -> CONSTANT .)
    DIV             reduce using rule 23 (constant -> CONSTANT .)
    POWER           reduce using rule 23 (constant -> CONSTANT .)
    RPAREN          reduce using rule 23 (constant -> CONSTANT .)
    AND             reduce using rule 23 (constant -> CONSTANT .)
    OR              reduce using rule 23 (constant -> CONSTANT .)
    IMPLY           reduce using rule 23 (constant -> CONSTANT .)
    $end            reduce using rule 23 (constant -> CONSTANT .)


state 10

    (22) symbol -> LITERAL .

    GE              reduce using rule 22 (symbol -> LITERAL .)
    GT              reduce using rule 22 (symbol -> LITERAL .)
    LT              reduce using rule 22 (symbol -> LITERAL .)
    LE              reduce using rule 22 (symbol -> LITERAL .)
    EQ              reduce using rule 22 (symbol -> LITERAL .)
    NEQ             reduce using rule 22 (symbol -> LITERAL .)
    ADD             reduce using rule 22 (symbol -> LITERAL .)
    SUB             reduce using rule 22 (symbol -> LITERAL .)
    MUL             reduce using rule 22 (symbol -> LITERAL .)
    DIV             reduce using rule 22 (symbol -> LITERAL .)
    POWER           reduce using rule 22 (symbol -> LITERAL .)
    RPAREN          reduce using rule 22 (symbol -> LITERAL .)
    AND             reduce using rule 22 (symbol -> LITERAL .)
    OR              reduce using rule 22 (symbol -> LITERAL .)
    IMPLY           reduce using rule 22 (symbol -> LITERAL .)
    $end            reduce using rule 22 (symbol -> LITERAL .)


state 11

    (8) proposition -> proposition AND . proposition
    (1) proposition -> . NOT proposition
    (2) proposition -> . expression GE expression
    (3) proposition -> . expression GT expression
    (4) proposition -> . expression LT expression
    (5) proposition -> . expression LE expression
    (6) proposition -> . expression EQ expression
    (7) proposition -> . expression NEQ expression
    (8) proposition -> . proposition AND proposition
    (9) proposition -> . proposition OR proposition
    (10) proposition -> . proposition IMPLY proposition
    (11) proposition -> . LPAREN proposition RPAREN
    (12) proposition -> . TRUE
    (13) proposition -> . FALSE
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression POWER expression
    (19) expression -> . constant
    (20) expression -> . symbol
    (21) expression -> . LPAREN expression RPAREN
    (23) constant -> . CONSTANT
    (22) symbol -> . LITERAL

    NOT             shift and go to state 2
    LPAREN          shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    proposition                    shift and go to state 28
    expression                     shift and go to state 3
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 12

    (9) proposition -> proposition OR . proposition
    (1) proposition -> . NOT proposition
    (2) proposition -> . expression GE expression
    (3) proposition -> . expression GT expression
    (4) proposition -> . expression LT expression
    (5) proposition -> . expression LE expression
    (6) proposition -> . expression EQ expression
    (7) proposition -> . expression NEQ expression
    (8) proposition -> . proposition AND proposition
    (9) proposition -> . proposition OR proposition
    (10) proposition -> . proposition IMPLY proposition
    (11) proposition -> . LPAREN proposition RPAREN
    (12) proposition -> . TRUE
    (13) proposition -> . FALSE
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression POWER expression
    (19) expression -> . constant
    (20) expression -> . symbol
    (21) expression -> . LPAREN expression RPAREN
    (23) constant -> . CONSTANT
    (22) symbol -> . LITERAL

    NOT             shift and go to state 2
    LPAREN          shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    proposition                    shift and go to state 29
    expression                     shift and go to state 3
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 13

    (10) proposition -> proposition IMPLY . proposition
    (1) proposition -> . NOT proposition
    (2) proposition -> . expression GE expression
    (3) proposition -> . expression GT expression
    (4) proposition -> . expression LT expression
    (5) proposition -> . expression LE expression
    (6) proposition -> . expression EQ expression
    (7) proposition -> . expression NEQ expression
    (8) proposition -> . proposition AND proposition
    (9) proposition -> . proposition OR proposition
    (10) proposition -> . proposition IMPLY proposition
    (11) proposition -> . LPAREN proposition RPAREN
    (12) proposition -> . TRUE
    (13) proposition -> . FALSE
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression POWER expression
    (19) expression -> . constant
    (20) expression -> . symbol
    (21) expression -> . LPAREN expression RPAREN
    (23) constant -> . CONSTANT
    (22) symbol -> . LITERAL

    NOT             shift and go to state 2
    LPAREN          shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    proposition                    shift and go to state 30
    expression                     shift and go to state 3
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 14

    (1) proposition -> NOT proposition .
    (8) proposition -> proposition . AND proposition
    (9) proposition -> proposition . OR proposition
    (10) proposition -> proposition . IMPLY proposition

    AND             reduce using rule 1 (proposition -> NOT proposition .)
    OR              reduce using rule 1 (proposition -> NOT proposition .)
    IMPLY           reduce using rule 1 (proposition -> NOT proposition .)
    $end            reduce using rule 1 (proposition -> NOT proposition .)
    RPAREN          reduce using rule 1 (proposition -> NOT proposition .)

  ! AND             [ shift and go to state 11 ]
  ! OR              [ shift and go to state 12 ]
  ! IMPLY           [ shift and go to state 13 ]


state 15

    (2) proposition -> expression GE . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression POWER expression
    (19) expression -> . constant
    (20) expression -> . symbol
    (21) expression -> . LPAREN expression RPAREN
    (23) constant -> . CONSTANT
    (22) symbol -> . LITERAL

    LPAREN          shift and go to state 32
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 31
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 16

    (3) proposition -> expression GT . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression POWER expression
    (19) expression -> . constant
    (20) expression -> . symbol
    (21) expression -> . LPAREN expression RPAREN
    (23) constant -> . CONSTANT
    (22) symbol -> . LITERAL

    LPAREN          shift and go to state 32
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 33
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 17

    (4) proposition -> expression LT . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression POWER expression
    (19) expression -> . constant
    (20) expression -> . symbol
    (21) expression -> . LPAREN expression RPAREN
    (23) constant -> . CONSTANT
    (22) symbol -> . LITERAL

    LPAREN          shift and go to state 32
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 34
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 18

    (5) proposition -> expression LE . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression POWER expression
    (19) expression -> . constant
    (20) expression -> . symbol
    (21) expression -> . LPAREN expression RPAREN
    (23) constant -> . CONSTANT
    (22) symbol -> . LITERAL

    LPAREN          shift and go to state 32
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 35
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 19

    (6) proposition -> expression EQ . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression POWER expression
    (19) expression -> . constant
    (20) expression -> . symbol
    (21) expression -> . LPAREN expression RPAREN
    (23) constant -> . CONSTANT
    (22) symbol -> . LITERAL

    LPAREN          shift and go to state 32
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 36
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 20

    (7) proposition -> expression NEQ . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression POWER expression
    (19) expression -> . constant
    (20) expression -> . symbol
    (21) expression -> . LPAREN expression RPAREN
    (23) constant -> . CONSTANT
    (22) symbol -> . LITERAL

    LPAREN          shift and go to state 32
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 37
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 21

    (14) expression -> expression ADD . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression POWER expression
    (19) expression -> . constant
    (20) expression -> . symbol
    (21) expression -> . LPAREN expression RPAREN
    (23) constant -> . CONSTANT
    (22) symbol -> . LITERAL

    LPAREN          shift and go to state 32
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 38
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 22

    (15) expression -> expression SUB . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression POWER expression
    (19) expression -> . constant
    (20) expression -> . symbol
    (21) expression -> . LPAREN expression RPAREN
    (23) constant -> . CONSTANT
    (22) symbol -> . LITERAL

    LPAREN          shift and go to state 32
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 39
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 23

    (16) expression -> expression MUL . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression POWER expression
    (19) expression -> . constant
    (20) expression -> . symbol
    (21) expression -> . LPAREN expression RPAREN
    (23) constant -> . CONSTANT
    (22) symbol -> . LITERAL

    LPAREN          shift and go to state 32
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 40
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 24

    (17) expression -> expression DIV . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression POWER expression
    (19) expression -> . constant
    (20) expression -> . symbol
    (21) expression -> . LPAREN expression RPAREN
    (23) constant -> . CONSTANT
    (22) symbol -> . LITERAL

    LPAREN          shift and go to state 32
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 41
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 25

    (18) expression -> expression POWER . expression
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression POWER expression
    (19) expression -> . constant
    (20) expression -> . symbol
    (21) expression -> . LPAREN expression RPAREN
    (23) constant -> . CONSTANT
    (22) symbol -> . LITERAL

    LPAREN          shift and go to state 32
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 42
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 26

    (11) proposition -> LPAREN proposition . RPAREN
    (8) proposition -> proposition . AND proposition
    (9) proposition -> proposition . OR proposition
    (10) proposition -> proposition . IMPLY proposition

    RPAREN          shift and go to state 43
    AND             shift and go to state 11
    OR              shift and go to state 12
    IMPLY           shift and go to state 13


state 27

    (21) expression -> LPAREN expression . RPAREN
    (2) proposition -> expression . GE expression
    (3) proposition -> expression . GT expression
    (4) proposition -> expression . LT expression
    (5) proposition -> expression . LE expression
    (6) proposition -> expression . EQ expression
    (7) proposition -> expression . NEQ expression
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . POWER expression

    RPAREN          shift and go to state 44
    GE              shift and go to state 15
    GT              shift and go to state 16
    LT              shift and go to state 17
    LE              shift and go to state 18
    EQ              shift and go to state 19
    NEQ             shift and go to state 20
    ADD             shift and go to state 21
    SUB             shift and go to state 22
    MUL             shift and go to state 23
    DIV             shift and go to state 24
    POWER           shift and go to state 25


state 28

    (8) proposition -> proposition AND proposition .
    (8) proposition -> proposition . AND proposition
    (9) proposition -> proposition . OR proposition
    (10) proposition -> proposition . IMPLY proposition

    AND             reduce using rule 8 (proposition -> proposition AND proposition .)
    OR              reduce using rule 8 (proposition -> proposition AND proposition .)
    IMPLY           reduce using rule 8 (proposition -> proposition AND proposition .)
    $end            reduce using rule 8 (proposition -> proposition AND proposition .)
    RPAREN          reduce using rule 8 (proposition -> proposition AND proposition .)

  ! AND             [ shift and go to state 11 ]
  ! OR              [ shift and go to state 12 ]
  ! IMPLY           [ shift and go to state 13 ]


state 29

    (9) proposition -> proposition OR proposition .
    (8) proposition -> proposition . AND proposition
    (9) proposition -> proposition . OR proposition
    (10) proposition -> proposition . IMPLY proposition

    AND             reduce using rule 9 (proposition -> proposition OR proposition .)
    OR              reduce using rule 9 (proposition -> proposition OR proposition .)
    IMPLY           reduce using rule 9 (proposition -> proposition OR proposition .)
    $end            reduce using rule 9 (proposition -> proposition OR proposition .)
    RPAREN          reduce using rule 9 (proposition -> proposition OR proposition .)

  ! AND             [ shift and go to state 11 ]
  ! OR              [ shift and go to state 12 ]
  ! IMPLY           [ shift and go to state 13 ]


state 30

    (10) proposition -> proposition IMPLY proposition .
    (8) proposition -> proposition . AND proposition
    (9) proposition -> proposition . OR proposition
    (10) proposition -> proposition . IMPLY proposition

    AND             reduce using rule 10 (proposition -> proposition IMPLY proposition .)
    OR              reduce using rule 10 (proposition -> proposition IMPLY proposition .)
    IMPLY           reduce using rule 10 (proposition -> proposition IMPLY proposition .)
    $end            reduce using rule 10 (proposition -> proposition IMPLY proposition .)
    RPAREN          reduce using rule 10 (proposition -> proposition IMPLY proposition .)

  ! AND             [ shift and go to state 11 ]
  ! OR              [ shift and go to state 12 ]
  ! IMPLY           [ shift and go to state 13 ]


state 31

    (2) proposition -> expression GE expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . POWER expression

    AND             reduce using rule 2 (proposition -> expression GE expression .)
    OR              reduce using rule 2 (proposition -> expression GE expression .)
    IMPLY           reduce using rule 2 (proposition -> expression GE expression .)
    $end            reduce using rule 2 (proposition -> expression GE expression .)
    RPAREN          reduce using rule 2 (proposition -> expression GE expression .)
    ADD             shift and go to state 21
    SUB             shift and go to state 22
    MUL             shift and go to state 23
    DIV             shift and go to state 24
    POWER           shift and go to state 25


state 32

    (21) expression -> LPAREN . expression RPAREN
    (14) expression -> . expression ADD expression
    (15) expression -> . expression SUB expression
    (16) expression -> . expression MUL expression
    (17) expression -> . expression DIV expression
    (18) expression -> . expression POWER expression
    (19) expression -> . constant
    (20) expression -> . symbol
    (21) expression -> . LPAREN expression RPAREN
    (23) constant -> . CONSTANT
    (22) symbol -> . LITERAL

    LPAREN          shift and go to state 32
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 45
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 33

    (3) proposition -> expression GT expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . POWER expression

    AND             reduce using rule 3 (proposition -> expression GT expression .)
    OR              reduce using rule 3 (proposition -> expression GT expression .)
    IMPLY           reduce using rule 3 (proposition -> expression GT expression .)
    $end            reduce using rule 3 (proposition -> expression GT expression .)
    RPAREN          reduce using rule 3 (proposition -> expression GT expression .)
    ADD             shift and go to state 21
    SUB             shift and go to state 22
    MUL             shift and go to state 23
    DIV             shift and go to state 24
    POWER           shift and go to state 25


state 34

    (4) proposition -> expression LT expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . POWER expression

    AND             reduce using rule 4 (proposition -> expression LT expression .)
    OR              reduce using rule 4 (proposition -> expression LT expression .)
    IMPLY           reduce using rule 4 (proposition -> expression LT expression .)
    $end            reduce using rule 4 (proposition -> expression LT expression .)
    RPAREN          reduce using rule 4 (proposition -> expression LT expression .)
    ADD             shift and go to state 21
    SUB             shift and go to state 22
    MUL             shift and go to state 23
    DIV             shift and go to state 24
    POWER           shift and go to state 25


state 35

    (5) proposition -> expression LE expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . POWER expression

    AND             reduce using rule 5 (proposition -> expression LE expression .)
    OR              reduce using rule 5 (proposition -> expression LE expression .)
    IMPLY           reduce using rule 5 (proposition -> expression LE expression .)
    $end            reduce using rule 5 (proposition -> expression LE expression .)
    RPAREN          reduce using rule 5 (proposition -> expression LE expression .)
    ADD             shift and go to state 21
    SUB             shift and go to state 22
    MUL             shift and go to state 23
    DIV             shift and go to state 24
    POWER           shift and go to state 25


state 36

    (6) proposition -> expression EQ expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . POWER expression

    AND             reduce using rule 6 (proposition -> expression EQ expression .)
    OR              reduce using rule 6 (proposition -> expression EQ expression .)
    IMPLY           reduce using rule 6 (proposition -> expression EQ expression .)
    $end            reduce using rule 6 (proposition -> expression EQ expression .)
    RPAREN          reduce using rule 6 (proposition -> expression EQ expression .)
    ADD             shift and go to state 21
    SUB             shift and go to state 22
    MUL             shift and go to state 23
    DIV             shift and go to state 24
    POWER           shift and go to state 25


state 37

    (7) proposition -> expression NEQ expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . POWER expression

    AND             reduce using rule 7 (proposition -> expression NEQ expression .)
    OR              reduce using rule 7 (proposition -> expression NEQ expression .)
    IMPLY           reduce using rule 7 (proposition -> expression NEQ expression .)
    $end            reduce using rule 7 (proposition -> expression NEQ expression .)
    RPAREN          reduce using rule 7 (proposition -> expression NEQ expression .)
    ADD             shift and go to state 21
    SUB             shift and go to state 22
    MUL             shift and go to state 23
    DIV             shift and go to state 24
    POWER           shift and go to state 25


state 38

    (14) expression -> expression ADD expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . POWER expression

    GE              reduce using rule 14 (expression -> expression ADD expression .)
    GT              reduce using rule 14 (expression -> expression ADD expression .)
    LT              reduce using rule 14 (expression -> expression ADD expression .)
    LE              reduce using rule 14 (expression -> expression ADD expression .)
    EQ              reduce using rule 14 (expression -> expression ADD expression .)
    NEQ             reduce using rule 14 (expression -> expression ADD expression .)
    ADD             reduce using rule 14 (expression -> expression ADD expression .)
    SUB             reduce using rule 14 (expression -> expression ADD expression .)
    RPAREN          reduce using rule 14 (expression -> expression ADD expression .)
    AND             reduce using rule 14 (expression -> expression ADD expression .)
    OR              reduce using rule 14 (expression -> expression ADD expression .)
    IMPLY           reduce using rule 14 (expression -> expression ADD expression .)
    $end            reduce using rule 14 (expression -> expression ADD expression .)
    MUL             shift and go to state 23
    DIV             shift and go to state 24
    POWER           shift and go to state 25

  ! MUL             [ reduce using rule 14 (expression -> expression ADD expression .) ]
  ! DIV             [ reduce using rule 14 (expression -> expression ADD expression .) ]
  ! POWER           [ reduce using rule 14 (expression -> expression ADD expression .) ]
  ! ADD             [ shift and go to state 21 ]
  ! SUB             [ shift and go to state 22 ]


state 39

    (15) expression -> expression SUB expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . POWER expression

    GE              reduce using rule 15 (expression -> expression SUB expression .)
    GT              reduce using rule 15 (expression -> expression SUB expression .)
    LT              reduce using rule 15 (expression -> expression SUB expression .)
    LE              reduce using rule 15 (expression -> expression SUB expression .)
    EQ              reduce using rule 15 (expression -> expression SUB expression .)
    NEQ             reduce using rule 15 (expression -> expression SUB expression .)
    ADD             reduce using rule 15 (expression -> expression SUB expression .)
    SUB             reduce using rule 15 (expression -> expression SUB expression .)
    RPAREN          reduce using rule 15 (expression -> expression SUB expression .)
    AND             reduce using rule 15 (expression -> expression SUB expression .)
    OR              reduce using rule 15 (expression -> expression SUB expression .)
    IMPLY           reduce using rule 15 (expression -> expression SUB expression .)
    $end            reduce using rule 15 (expression -> expression SUB expression .)
    MUL             shift and go to state 23
    DIV             shift and go to state 24
    POWER           shift and go to state 25

  ! MUL             [ reduce using rule 15 (expression -> expression SUB expression .) ]
  ! DIV             [ reduce using rule 15 (expression -> expression SUB expression .) ]
  ! POWER           [ reduce using rule 15 (expression -> expression SUB expression .) ]
  ! ADD             [ shift and go to state 21 ]
  ! SUB             [ shift and go to state 22 ]


state 40

    (16) expression -> expression MUL expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . POWER expression

    GE              reduce using rule 16 (expression -> expression MUL expression .)
    GT              reduce using rule 16 (expression -> expression MUL expression .)
    LT              reduce using rule 16 (expression -> expression MUL expression .)
    LE              reduce using rule 16 (expression -> expression MUL expression .)
    EQ              reduce using rule 16 (expression -> expression MUL expression .)
    NEQ             reduce using rule 16 (expression -> expression MUL expression .)
    ADD             reduce using rule 16 (expression -> expression MUL expression .)
    SUB             reduce using rule 16 (expression -> expression MUL expression .)
    MUL             reduce using rule 16 (expression -> expression MUL expression .)
    DIV             reduce using rule 16 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 16 (expression -> expression MUL expression .)
    AND             reduce using rule 16 (expression -> expression MUL expression .)
    OR              reduce using rule 16 (expression -> expression MUL expression .)
    IMPLY           reduce using rule 16 (expression -> expression MUL expression .)
    $end            reduce using rule 16 (expression -> expression MUL expression .)
    POWER           shift and go to state 25

  ! POWER           [ reduce using rule 16 (expression -> expression MUL expression .) ]
  ! ADD             [ shift and go to state 21 ]
  ! SUB             [ shift and go to state 22 ]
  ! MUL             [ shift and go to state 23 ]
  ! DIV             [ shift and go to state 24 ]


state 41

    (17) expression -> expression DIV expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . POWER expression

    GE              reduce using rule 17 (expression -> expression DIV expression .)
    GT              reduce using rule 17 (expression -> expression DIV expression .)
    LT              reduce using rule 17 (expression -> expression DIV expression .)
    LE              reduce using rule 17 (expression -> expression DIV expression .)
    EQ              reduce using rule 17 (expression -> expression DIV expression .)
    NEQ             reduce using rule 17 (expression -> expression DIV expression .)
    ADD             reduce using rule 17 (expression -> expression DIV expression .)
    SUB             reduce using rule 17 (expression -> expression DIV expression .)
    MUL             reduce using rule 17 (expression -> expression DIV expression .)
    DIV             reduce using rule 17 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 17 (expression -> expression DIV expression .)
    AND             reduce using rule 17 (expression -> expression DIV expression .)
    OR              reduce using rule 17 (expression -> expression DIV expression .)
    IMPLY           reduce using rule 17 (expression -> expression DIV expression .)
    $end            reduce using rule 17 (expression -> expression DIV expression .)
    POWER           shift and go to state 25

  ! POWER           [ reduce using rule 17 (expression -> expression DIV expression .) ]
  ! ADD             [ shift and go to state 21 ]
  ! SUB             [ shift and go to state 22 ]
  ! MUL             [ shift and go to state 23 ]
  ! DIV             [ shift and go to state 24 ]


state 42

    (18) expression -> expression POWER expression .
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . POWER expression

    GE              reduce using rule 18 (expression -> expression POWER expression .)
    GT              reduce using rule 18 (expression -> expression POWER expression .)
    LT              reduce using rule 18 (expression -> expression POWER expression .)
    LE              reduce using rule 18 (expression -> expression POWER expression .)
    EQ              reduce using rule 18 (expression -> expression POWER expression .)
    NEQ             reduce using rule 18 (expression -> expression POWER expression .)
    ADD             reduce using rule 18 (expression -> expression POWER expression .)
    SUB             reduce using rule 18 (expression -> expression POWER expression .)
    MUL             reduce using rule 18 (expression -> expression POWER expression .)
    DIV             reduce using rule 18 (expression -> expression POWER expression .)
    POWER           reduce using rule 18 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 18 (expression -> expression POWER expression .)
    AND             reduce using rule 18 (expression -> expression POWER expression .)
    OR              reduce using rule 18 (expression -> expression POWER expression .)
    IMPLY           reduce using rule 18 (expression -> expression POWER expression .)
    $end            reduce using rule 18 (expression -> expression POWER expression .)

  ! ADD             [ shift and go to state 21 ]
  ! SUB             [ shift and go to state 22 ]
  ! MUL             [ shift and go to state 23 ]
  ! DIV             [ shift and go to state 24 ]
  ! POWER           [ shift and go to state 25 ]


state 43

    (11) proposition -> LPAREN proposition RPAREN .

    AND             reduce using rule 11 (proposition -> LPAREN proposition RPAREN .)
    OR              reduce using rule 11 (proposition -> LPAREN proposition RPAREN .)
    IMPLY           reduce using rule 11 (proposition -> LPAREN proposition RPAREN .)
    $end            reduce using rule 11 (proposition -> LPAREN proposition RPAREN .)
    RPAREN          reduce using rule 11 (proposition -> LPAREN proposition RPAREN .)


state 44

    (21) expression -> LPAREN expression RPAREN .

    GE              reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    ADD             reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    SUB             reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    IMPLY           reduce using rule 21 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 21 (expression -> LPAREN expression RPAREN .)


state 45

    (21) expression -> LPAREN expression . RPAREN
    (14) expression -> expression . ADD expression
    (15) expression -> expression . SUB expression
    (16) expression -> expression . MUL expression
    (17) expression -> expression . DIV expression
    (18) expression -> expression . POWER expression

    RPAREN          shift and go to state 44
    ADD             shift and go to state 21
    SUB             shift and go to state 22
    MUL             shift and go to state 23
    DIV             shift and go to state 24
    POWER           shift and go to state 25

