Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    EXIST
    FORALL
    LAND
    LOR

Grammar

Rule 0     S' -> proposition
Rule 1     proposition -> NOT proposition
Rule 2     proposition -> NOT expression
Rule 3     proposition -> expression GE expression
Rule 4     proposition -> expression GT expression
Rule 5     proposition -> expression LT expression
Rule 6     proposition -> expression LE expression
Rule 7     proposition -> expression EQ expression
Rule 8     proposition -> expression NEQ expression
Rule 9     proposition -> proposition AND proposition
Rule 10    proposition -> proposition OR proposition
Rule 11    proposition -> proposition IMPLY proposition
Rule 12    proposition -> expression EQ proposition
Rule 13    proposition -> expression NEQ proposition
Rule 14    proposition -> proposition EQ expression
Rule 15    proposition -> proposition NEQ expression
Rule 16    proposition -> LPAREN proposition RPAREN
Rule 17    proposition -> TRUE
Rule 18    proposition -> FALSE
Rule 19    expression -> expression ADD expression
Rule 20    expression -> expression SUB expression
Rule 21    expression -> expression MUL expression
Rule 22    expression -> expression DIV expression
Rule 23    expression -> expression POWER expression
Rule 24    expression -> constant
Rule 25    expression -> symbol
Rule 26    expression -> LPAREN expression RPAREN
Rule 27    symbol -> LITERAL
Rule 28    constant -> CONSTANT

Terminals, with rules where they appear

ADD                  : 19
AND                  : 9
COMMENT              : 
CONSTANT             : 28
DIV                  : 22
EQ                   : 7 12 14
EXIST                : 
FALSE                : 18
FORALL               : 
GE                   : 3
GT                   : 4
IMPLY                : 11
LAND                 : 
LE                   : 6
LITERAL              : 27
LOR                  : 
LPAREN               : 16 26
LT                   : 5
MUL                  : 21
NEQ                  : 8 13 15
NOT                  : 1 2
OR                   : 10
POWER                : 23
RPAREN               : 16 26
SUB                  : 20
TRUE                 : 17
error                : 

Nonterminals, with rules where they appear

constant             : 24
expression           : 2 3 3 4 4 5 5 6 6 7 7 8 8 12 13 14 15 19 19 20 20 21 21 22 22 23 23 26
proposition          : 1 9 9 10 10 11 11 12 13 14 15 16 0
symbol               : 25

Parsing method: LALR

state 0

    (0) S' -> . proposition
    (1) proposition -> . NOT proposition
    (2) proposition -> . NOT expression
    (3) proposition -> . expression GE expression
    (4) proposition -> . expression GT expression
    (5) proposition -> . expression LT expression
    (6) proposition -> . expression LE expression
    (7) proposition -> . expression EQ expression
    (8) proposition -> . expression NEQ expression
    (9) proposition -> . proposition AND proposition
    (10) proposition -> . proposition OR proposition
    (11) proposition -> . proposition IMPLY proposition
    (12) proposition -> . expression EQ proposition
    (13) proposition -> . expression NEQ proposition
    (14) proposition -> . proposition EQ expression
    (15) proposition -> . proposition NEQ expression
    (16) proposition -> . LPAREN proposition RPAREN
    (17) proposition -> . TRUE
    (18) proposition -> . FALSE
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    NOT             shift and go to state 2
    LPAREN          shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    proposition                    shift and go to state 1
    expression                     shift and go to state 3
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 1

    (0) S' -> proposition .
    (9) proposition -> proposition . AND proposition
    (10) proposition -> proposition . OR proposition
    (11) proposition -> proposition . IMPLY proposition
    (14) proposition -> proposition . EQ expression
    (15) proposition -> proposition . NEQ expression

    AND             shift and go to state 11
    OR              shift and go to state 12
    IMPLY           shift and go to state 13
    EQ              shift and go to state 14
    NEQ             shift and go to state 15


state 2

    (1) proposition -> NOT . proposition
    (2) proposition -> NOT . expression
    (1) proposition -> . NOT proposition
    (2) proposition -> . NOT expression
    (3) proposition -> . expression GE expression
    (4) proposition -> . expression GT expression
    (5) proposition -> . expression LT expression
    (6) proposition -> . expression LE expression
    (7) proposition -> . expression EQ expression
    (8) proposition -> . expression NEQ expression
    (9) proposition -> . proposition AND proposition
    (10) proposition -> . proposition OR proposition
    (11) proposition -> . proposition IMPLY proposition
    (12) proposition -> . expression EQ proposition
    (13) proposition -> . expression NEQ proposition
    (14) proposition -> . proposition EQ expression
    (15) proposition -> . proposition NEQ expression
    (16) proposition -> . LPAREN proposition RPAREN
    (17) proposition -> . TRUE
    (18) proposition -> . FALSE
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    NOT             shift and go to state 2
    LPAREN          shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    proposition                    shift and go to state 16
    expression                     shift and go to state 17
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 3

    (3) proposition -> expression . GE expression
    (4) proposition -> expression . GT expression
    (5) proposition -> expression . LT expression
    (6) proposition -> expression . LE expression
    (7) proposition -> expression . EQ expression
    (8) proposition -> expression . NEQ expression
    (12) proposition -> expression . EQ proposition
    (13) proposition -> expression . NEQ proposition
    (19) expression -> expression . ADD expression
    (20) expression -> expression . SUB expression
    (21) expression -> expression . MUL expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . POWER expression

    GE              shift and go to state 18
    GT              shift and go to state 19
    LT              shift and go to state 20
    LE              shift and go to state 21
    EQ              shift and go to state 22
    NEQ             shift and go to state 23
    ADD             shift and go to state 24
    SUB             shift and go to state 25
    MUL             shift and go to state 26
    DIV             shift and go to state 27
    POWER           shift and go to state 28


state 4

    (16) proposition -> LPAREN . proposition RPAREN
    (26) expression -> LPAREN . expression RPAREN
    (1) proposition -> . NOT proposition
    (2) proposition -> . NOT expression
    (3) proposition -> . expression GE expression
    (4) proposition -> . expression GT expression
    (5) proposition -> . expression LT expression
    (6) proposition -> . expression LE expression
    (7) proposition -> . expression EQ expression
    (8) proposition -> . expression NEQ expression
    (9) proposition -> . proposition AND proposition
    (10) proposition -> . proposition OR proposition
    (11) proposition -> . proposition IMPLY proposition
    (12) proposition -> . expression EQ proposition
    (13) proposition -> . expression NEQ proposition
    (14) proposition -> . proposition EQ expression
    (15) proposition -> . proposition NEQ expression
    (16) proposition -> . LPAREN proposition RPAREN
    (17) proposition -> . TRUE
    (18) proposition -> . FALSE
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    NOT             shift and go to state 2
    LPAREN          shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    proposition                    shift and go to state 29
    expression                     shift and go to state 30
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 5

    (17) proposition -> TRUE .

    AND             reduce using rule 17 (proposition -> TRUE .)
    OR              reduce using rule 17 (proposition -> TRUE .)
    IMPLY           reduce using rule 17 (proposition -> TRUE .)
    EQ              reduce using rule 17 (proposition -> TRUE .)
    NEQ             reduce using rule 17 (proposition -> TRUE .)
    $end            reduce using rule 17 (proposition -> TRUE .)
    RPAREN          reduce using rule 17 (proposition -> TRUE .)


state 6

    (18) proposition -> FALSE .

    AND             reduce using rule 18 (proposition -> FALSE .)
    OR              reduce using rule 18 (proposition -> FALSE .)
    IMPLY           reduce using rule 18 (proposition -> FALSE .)
    EQ              reduce using rule 18 (proposition -> FALSE .)
    NEQ             reduce using rule 18 (proposition -> FALSE .)
    $end            reduce using rule 18 (proposition -> FALSE .)
    RPAREN          reduce using rule 18 (proposition -> FALSE .)


state 7

    (24) expression -> constant .

    GE              reduce using rule 24 (expression -> constant .)
    GT              reduce using rule 24 (expression -> constant .)
    LT              reduce using rule 24 (expression -> constant .)
    LE              reduce using rule 24 (expression -> constant .)
    EQ              reduce using rule 24 (expression -> constant .)
    NEQ             reduce using rule 24 (expression -> constant .)
    ADD             reduce using rule 24 (expression -> constant .)
    SUB             reduce using rule 24 (expression -> constant .)
    MUL             reduce using rule 24 (expression -> constant .)
    DIV             reduce using rule 24 (expression -> constant .)
    POWER           reduce using rule 24 (expression -> constant .)
    AND             reduce using rule 24 (expression -> constant .)
    OR              reduce using rule 24 (expression -> constant .)
    IMPLY           reduce using rule 24 (expression -> constant .)
    $end            reduce using rule 24 (expression -> constant .)
    RPAREN          reduce using rule 24 (expression -> constant .)


state 8

    (25) expression -> symbol .

    GE              reduce using rule 25 (expression -> symbol .)
    GT              reduce using rule 25 (expression -> symbol .)
    LT              reduce using rule 25 (expression -> symbol .)
    LE              reduce using rule 25 (expression -> symbol .)
    EQ              reduce using rule 25 (expression -> symbol .)
    NEQ             reduce using rule 25 (expression -> symbol .)
    ADD             reduce using rule 25 (expression -> symbol .)
    SUB             reduce using rule 25 (expression -> symbol .)
    MUL             reduce using rule 25 (expression -> symbol .)
    DIV             reduce using rule 25 (expression -> symbol .)
    POWER           reduce using rule 25 (expression -> symbol .)
    AND             reduce using rule 25 (expression -> symbol .)
    OR              reduce using rule 25 (expression -> symbol .)
    IMPLY           reduce using rule 25 (expression -> symbol .)
    $end            reduce using rule 25 (expression -> symbol .)
    RPAREN          reduce using rule 25 (expression -> symbol .)


state 9

    (28) constant -> CONSTANT .

    GE              reduce using rule 28 (constant -> CONSTANT .)
    GT              reduce using rule 28 (constant -> CONSTANT .)
    LT              reduce using rule 28 (constant -> CONSTANT .)
    LE              reduce using rule 28 (constant -> CONSTANT .)
    EQ              reduce using rule 28 (constant -> CONSTANT .)
    NEQ             reduce using rule 28 (constant -> CONSTANT .)
    ADD             reduce using rule 28 (constant -> CONSTANT .)
    SUB             reduce using rule 28 (constant -> CONSTANT .)
    MUL             reduce using rule 28 (constant -> CONSTANT .)
    DIV             reduce using rule 28 (constant -> CONSTANT .)
    POWER           reduce using rule 28 (constant -> CONSTANT .)
    AND             reduce using rule 28 (constant -> CONSTANT .)
    OR              reduce using rule 28 (constant -> CONSTANT .)
    IMPLY           reduce using rule 28 (constant -> CONSTANT .)
    $end            reduce using rule 28 (constant -> CONSTANT .)
    RPAREN          reduce using rule 28 (constant -> CONSTANT .)


state 10

    (27) symbol -> LITERAL .

    GE              reduce using rule 27 (symbol -> LITERAL .)
    GT              reduce using rule 27 (symbol -> LITERAL .)
    LT              reduce using rule 27 (symbol -> LITERAL .)
    LE              reduce using rule 27 (symbol -> LITERAL .)
    EQ              reduce using rule 27 (symbol -> LITERAL .)
    NEQ             reduce using rule 27 (symbol -> LITERAL .)
    ADD             reduce using rule 27 (symbol -> LITERAL .)
    SUB             reduce using rule 27 (symbol -> LITERAL .)
    MUL             reduce using rule 27 (symbol -> LITERAL .)
    DIV             reduce using rule 27 (symbol -> LITERAL .)
    POWER           reduce using rule 27 (symbol -> LITERAL .)
    AND             reduce using rule 27 (symbol -> LITERAL .)
    OR              reduce using rule 27 (symbol -> LITERAL .)
    IMPLY           reduce using rule 27 (symbol -> LITERAL .)
    $end            reduce using rule 27 (symbol -> LITERAL .)
    RPAREN          reduce using rule 27 (symbol -> LITERAL .)


state 11

    (9) proposition -> proposition AND . proposition
    (1) proposition -> . NOT proposition
    (2) proposition -> . NOT expression
    (3) proposition -> . expression GE expression
    (4) proposition -> . expression GT expression
    (5) proposition -> . expression LT expression
    (6) proposition -> . expression LE expression
    (7) proposition -> . expression EQ expression
    (8) proposition -> . expression NEQ expression
    (9) proposition -> . proposition AND proposition
    (10) proposition -> . proposition OR proposition
    (11) proposition -> . proposition IMPLY proposition
    (12) proposition -> . expression EQ proposition
    (13) proposition -> . expression NEQ proposition
    (14) proposition -> . proposition EQ expression
    (15) proposition -> . proposition NEQ expression
    (16) proposition -> . LPAREN proposition RPAREN
    (17) proposition -> . TRUE
    (18) proposition -> . FALSE
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    NOT             shift and go to state 2
    LPAREN          shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    proposition                    shift and go to state 31
    expression                     shift and go to state 3
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 12

    (10) proposition -> proposition OR . proposition
    (1) proposition -> . NOT proposition
    (2) proposition -> . NOT expression
    (3) proposition -> . expression GE expression
    (4) proposition -> . expression GT expression
    (5) proposition -> . expression LT expression
    (6) proposition -> . expression LE expression
    (7) proposition -> . expression EQ expression
    (8) proposition -> . expression NEQ expression
    (9) proposition -> . proposition AND proposition
    (10) proposition -> . proposition OR proposition
    (11) proposition -> . proposition IMPLY proposition
    (12) proposition -> . expression EQ proposition
    (13) proposition -> . expression NEQ proposition
    (14) proposition -> . proposition EQ expression
    (15) proposition -> . proposition NEQ expression
    (16) proposition -> . LPAREN proposition RPAREN
    (17) proposition -> . TRUE
    (18) proposition -> . FALSE
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    NOT             shift and go to state 2
    LPAREN          shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    proposition                    shift and go to state 32
    expression                     shift and go to state 3
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 13

    (11) proposition -> proposition IMPLY . proposition
    (1) proposition -> . NOT proposition
    (2) proposition -> . NOT expression
    (3) proposition -> . expression GE expression
    (4) proposition -> . expression GT expression
    (5) proposition -> . expression LT expression
    (6) proposition -> . expression LE expression
    (7) proposition -> . expression EQ expression
    (8) proposition -> . expression NEQ expression
    (9) proposition -> . proposition AND proposition
    (10) proposition -> . proposition OR proposition
    (11) proposition -> . proposition IMPLY proposition
    (12) proposition -> . expression EQ proposition
    (13) proposition -> . expression NEQ proposition
    (14) proposition -> . proposition EQ expression
    (15) proposition -> . proposition NEQ expression
    (16) proposition -> . LPAREN proposition RPAREN
    (17) proposition -> . TRUE
    (18) proposition -> . FALSE
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    NOT             shift and go to state 2
    LPAREN          shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    proposition                    shift and go to state 33
    expression                     shift and go to state 3
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 14

    (14) proposition -> proposition EQ . expression
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    LPAREN          shift and go to state 35
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 34
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 15

    (15) proposition -> proposition NEQ . expression
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    LPAREN          shift and go to state 35
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 36
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 16

    (1) proposition -> NOT proposition .
    (9) proposition -> proposition . AND proposition
    (10) proposition -> proposition . OR proposition
    (11) proposition -> proposition . IMPLY proposition
    (14) proposition -> proposition . EQ expression
    (15) proposition -> proposition . NEQ expression

    AND             reduce using rule 1 (proposition -> NOT proposition .)
    OR              reduce using rule 1 (proposition -> NOT proposition .)
    IMPLY           reduce using rule 1 (proposition -> NOT proposition .)
    $end            reduce using rule 1 (proposition -> NOT proposition .)
    RPAREN          reduce using rule 1 (proposition -> NOT proposition .)
    EQ              shift and go to state 14
    NEQ             shift and go to state 15

  ! EQ              [ reduce using rule 1 (proposition -> NOT proposition .) ]
  ! NEQ             [ reduce using rule 1 (proposition -> NOT proposition .) ]
  ! AND             [ shift and go to state 11 ]
  ! OR              [ shift and go to state 12 ]
  ! IMPLY           [ shift and go to state 13 ]


state 17

    (2) proposition -> NOT expression .
    (3) proposition -> expression . GE expression
    (4) proposition -> expression . GT expression
    (5) proposition -> expression . LT expression
    (6) proposition -> expression . LE expression
    (7) proposition -> expression . EQ expression
    (8) proposition -> expression . NEQ expression
    (12) proposition -> expression . EQ proposition
    (13) proposition -> expression . NEQ proposition
    (19) expression -> expression . ADD expression
    (20) expression -> expression . SUB expression
    (21) expression -> expression . MUL expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . POWER expression

    AND             reduce using rule 2 (proposition -> NOT expression .)
    OR              reduce using rule 2 (proposition -> NOT expression .)
    IMPLY           reduce using rule 2 (proposition -> NOT expression .)
    $end            reduce using rule 2 (proposition -> NOT expression .)
    RPAREN          reduce using rule 2 (proposition -> NOT expression .)
    GE              shift and go to state 18
    GT              shift and go to state 19
    LT              shift and go to state 20
    LE              shift and go to state 21
    EQ              shift and go to state 22
    NEQ             shift and go to state 23
    ADD             shift and go to state 24
    SUB             shift and go to state 25
    MUL             shift and go to state 26
    DIV             shift and go to state 27
    POWER           shift and go to state 28

  ! EQ              [ reduce using rule 2 (proposition -> NOT expression .) ]
  ! NEQ             [ reduce using rule 2 (proposition -> NOT expression .) ]


state 18

    (3) proposition -> expression GE . expression
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    LPAREN          shift and go to state 35
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 37
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 19

    (4) proposition -> expression GT . expression
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    LPAREN          shift and go to state 35
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 38
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 20

    (5) proposition -> expression LT . expression
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    LPAREN          shift and go to state 35
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 39
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 21

    (6) proposition -> expression LE . expression
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    LPAREN          shift and go to state 35
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 40
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 22

    (7) proposition -> expression EQ . expression
    (12) proposition -> expression EQ . proposition
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (1) proposition -> . NOT proposition
    (2) proposition -> . NOT expression
    (3) proposition -> . expression GE expression
    (4) proposition -> . expression GT expression
    (5) proposition -> . expression LT expression
    (6) proposition -> . expression LE expression
    (7) proposition -> . expression EQ expression
    (8) proposition -> . expression NEQ expression
    (9) proposition -> . proposition AND proposition
    (10) proposition -> . proposition OR proposition
    (11) proposition -> . proposition IMPLY proposition
    (12) proposition -> . expression EQ proposition
    (13) proposition -> . expression NEQ proposition
    (14) proposition -> . proposition EQ expression
    (15) proposition -> . proposition NEQ expression
    (16) proposition -> . LPAREN proposition RPAREN
    (17) proposition -> . TRUE
    (18) proposition -> . FALSE
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    LPAREN          shift and go to state 43
    NOT             shift and go to state 2
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 41
    proposition                    shift and go to state 42
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 23

    (8) proposition -> expression NEQ . expression
    (13) proposition -> expression NEQ . proposition
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (1) proposition -> . NOT proposition
    (2) proposition -> . NOT expression
    (3) proposition -> . expression GE expression
    (4) proposition -> . expression GT expression
    (5) proposition -> . expression LT expression
    (6) proposition -> . expression LE expression
    (7) proposition -> . expression EQ expression
    (8) proposition -> . expression NEQ expression
    (9) proposition -> . proposition AND proposition
    (10) proposition -> . proposition OR proposition
    (11) proposition -> . proposition IMPLY proposition
    (12) proposition -> . expression EQ proposition
    (13) proposition -> . expression NEQ proposition
    (14) proposition -> . proposition EQ expression
    (15) proposition -> . proposition NEQ expression
    (16) proposition -> . LPAREN proposition RPAREN
    (17) proposition -> . TRUE
    (18) proposition -> . FALSE
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    LPAREN          shift and go to state 43
    NOT             shift and go to state 2
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 44
    proposition                    shift and go to state 45
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 24

    (19) expression -> expression ADD . expression
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    LPAREN          shift and go to state 35
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 46
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 25

    (20) expression -> expression SUB . expression
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    LPAREN          shift and go to state 35
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 47
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 26

    (21) expression -> expression MUL . expression
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    LPAREN          shift and go to state 35
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 48
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 27

    (22) expression -> expression DIV . expression
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    LPAREN          shift and go to state 35
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 49
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 28

    (23) expression -> expression POWER . expression
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    LPAREN          shift and go to state 35
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 50
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 29

    (16) proposition -> LPAREN proposition . RPAREN
    (9) proposition -> proposition . AND proposition
    (10) proposition -> proposition . OR proposition
    (11) proposition -> proposition . IMPLY proposition
    (14) proposition -> proposition . EQ expression
    (15) proposition -> proposition . NEQ expression

    RPAREN          shift and go to state 51
    AND             shift and go to state 11
    OR              shift and go to state 12
    IMPLY           shift and go to state 13
    EQ              shift and go to state 14
    NEQ             shift and go to state 15


state 30

    (26) expression -> LPAREN expression . RPAREN
    (3) proposition -> expression . GE expression
    (4) proposition -> expression . GT expression
    (5) proposition -> expression . LT expression
    (6) proposition -> expression . LE expression
    (7) proposition -> expression . EQ expression
    (8) proposition -> expression . NEQ expression
    (12) proposition -> expression . EQ proposition
    (13) proposition -> expression . NEQ proposition
    (19) expression -> expression . ADD expression
    (20) expression -> expression . SUB expression
    (21) expression -> expression . MUL expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . POWER expression

    RPAREN          shift and go to state 52
    GE              shift and go to state 18
    GT              shift and go to state 19
    LT              shift and go to state 20
    LE              shift and go to state 21
    EQ              shift and go to state 22
    NEQ             shift and go to state 23
    ADD             shift and go to state 24
    SUB             shift and go to state 25
    MUL             shift and go to state 26
    DIV             shift and go to state 27
    POWER           shift and go to state 28


state 31

    (9) proposition -> proposition AND proposition .
    (9) proposition -> proposition . AND proposition
    (10) proposition -> proposition . OR proposition
    (11) proposition -> proposition . IMPLY proposition
    (14) proposition -> proposition . EQ expression
    (15) proposition -> proposition . NEQ expression

    AND             reduce using rule 9 (proposition -> proposition AND proposition .)
    OR              reduce using rule 9 (proposition -> proposition AND proposition .)
    IMPLY           reduce using rule 9 (proposition -> proposition AND proposition .)
    $end            reduce using rule 9 (proposition -> proposition AND proposition .)
    RPAREN          reduce using rule 9 (proposition -> proposition AND proposition .)
    EQ              shift and go to state 14
    NEQ             shift and go to state 15

  ! EQ              [ reduce using rule 9 (proposition -> proposition AND proposition .) ]
  ! NEQ             [ reduce using rule 9 (proposition -> proposition AND proposition .) ]
  ! AND             [ shift and go to state 11 ]
  ! OR              [ shift and go to state 12 ]
  ! IMPLY           [ shift and go to state 13 ]


state 32

    (10) proposition -> proposition OR proposition .
    (9) proposition -> proposition . AND proposition
    (10) proposition -> proposition . OR proposition
    (11) proposition -> proposition . IMPLY proposition
    (14) proposition -> proposition . EQ expression
    (15) proposition -> proposition . NEQ expression

    AND             reduce using rule 10 (proposition -> proposition OR proposition .)
    OR              reduce using rule 10 (proposition -> proposition OR proposition .)
    IMPLY           reduce using rule 10 (proposition -> proposition OR proposition .)
    $end            reduce using rule 10 (proposition -> proposition OR proposition .)
    RPAREN          reduce using rule 10 (proposition -> proposition OR proposition .)
    EQ              shift and go to state 14
    NEQ             shift and go to state 15

  ! EQ              [ reduce using rule 10 (proposition -> proposition OR proposition .) ]
  ! NEQ             [ reduce using rule 10 (proposition -> proposition OR proposition .) ]
  ! AND             [ shift and go to state 11 ]
  ! OR              [ shift and go to state 12 ]
  ! IMPLY           [ shift and go to state 13 ]


state 33

    (11) proposition -> proposition IMPLY proposition .
    (9) proposition -> proposition . AND proposition
    (10) proposition -> proposition . OR proposition
    (11) proposition -> proposition . IMPLY proposition
    (14) proposition -> proposition . EQ expression
    (15) proposition -> proposition . NEQ expression

    AND             reduce using rule 11 (proposition -> proposition IMPLY proposition .)
    OR              reduce using rule 11 (proposition -> proposition IMPLY proposition .)
    IMPLY           reduce using rule 11 (proposition -> proposition IMPLY proposition .)
    $end            reduce using rule 11 (proposition -> proposition IMPLY proposition .)
    RPAREN          reduce using rule 11 (proposition -> proposition IMPLY proposition .)
    EQ              shift and go to state 14
    NEQ             shift and go to state 15

  ! EQ              [ reduce using rule 11 (proposition -> proposition IMPLY proposition .) ]
  ! NEQ             [ reduce using rule 11 (proposition -> proposition IMPLY proposition .) ]
  ! AND             [ shift and go to state 11 ]
  ! OR              [ shift and go to state 12 ]
  ! IMPLY           [ shift and go to state 13 ]


state 34

    (14) proposition -> proposition EQ expression .
    (19) expression -> expression . ADD expression
    (20) expression -> expression . SUB expression
    (21) expression -> expression . MUL expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . POWER expression

    AND             reduce using rule 14 (proposition -> proposition EQ expression .)
    OR              reduce using rule 14 (proposition -> proposition EQ expression .)
    IMPLY           reduce using rule 14 (proposition -> proposition EQ expression .)
    EQ              reduce using rule 14 (proposition -> proposition EQ expression .)
    NEQ             reduce using rule 14 (proposition -> proposition EQ expression .)
    $end            reduce using rule 14 (proposition -> proposition EQ expression .)
    RPAREN          reduce using rule 14 (proposition -> proposition EQ expression .)
    ADD             shift and go to state 24
    SUB             shift and go to state 25
    MUL             shift and go to state 26
    DIV             shift and go to state 27
    POWER           shift and go to state 28


state 35

    (26) expression -> LPAREN . expression RPAREN
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    LPAREN          shift and go to state 35
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 53
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 36

    (15) proposition -> proposition NEQ expression .
    (19) expression -> expression . ADD expression
    (20) expression -> expression . SUB expression
    (21) expression -> expression . MUL expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . POWER expression

    AND             reduce using rule 15 (proposition -> proposition NEQ expression .)
    OR              reduce using rule 15 (proposition -> proposition NEQ expression .)
    IMPLY           reduce using rule 15 (proposition -> proposition NEQ expression .)
    EQ              reduce using rule 15 (proposition -> proposition NEQ expression .)
    NEQ             reduce using rule 15 (proposition -> proposition NEQ expression .)
    $end            reduce using rule 15 (proposition -> proposition NEQ expression .)
    RPAREN          reduce using rule 15 (proposition -> proposition NEQ expression .)
    ADD             shift and go to state 24
    SUB             shift and go to state 25
    MUL             shift and go to state 26
    DIV             shift and go to state 27
    POWER           shift and go to state 28


state 37

    (3) proposition -> expression GE expression .
    (19) expression -> expression . ADD expression
    (20) expression -> expression . SUB expression
    (21) expression -> expression . MUL expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . POWER expression

    AND             reduce using rule 3 (proposition -> expression GE expression .)
    OR              reduce using rule 3 (proposition -> expression GE expression .)
    IMPLY           reduce using rule 3 (proposition -> expression GE expression .)
    EQ              reduce using rule 3 (proposition -> expression GE expression .)
    NEQ             reduce using rule 3 (proposition -> expression GE expression .)
    $end            reduce using rule 3 (proposition -> expression GE expression .)
    RPAREN          reduce using rule 3 (proposition -> expression GE expression .)
    ADD             shift and go to state 24
    SUB             shift and go to state 25
    MUL             shift and go to state 26
    DIV             shift and go to state 27
    POWER           shift and go to state 28


state 38

    (4) proposition -> expression GT expression .
    (19) expression -> expression . ADD expression
    (20) expression -> expression . SUB expression
    (21) expression -> expression . MUL expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . POWER expression

    AND             reduce using rule 4 (proposition -> expression GT expression .)
    OR              reduce using rule 4 (proposition -> expression GT expression .)
    IMPLY           reduce using rule 4 (proposition -> expression GT expression .)
    EQ              reduce using rule 4 (proposition -> expression GT expression .)
    NEQ             reduce using rule 4 (proposition -> expression GT expression .)
    $end            reduce using rule 4 (proposition -> expression GT expression .)
    RPAREN          reduce using rule 4 (proposition -> expression GT expression .)
    ADD             shift and go to state 24
    SUB             shift and go to state 25
    MUL             shift and go to state 26
    DIV             shift and go to state 27
    POWER           shift and go to state 28


state 39

    (5) proposition -> expression LT expression .
    (19) expression -> expression . ADD expression
    (20) expression -> expression . SUB expression
    (21) expression -> expression . MUL expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . POWER expression

    AND             reduce using rule 5 (proposition -> expression LT expression .)
    OR              reduce using rule 5 (proposition -> expression LT expression .)
    IMPLY           reduce using rule 5 (proposition -> expression LT expression .)
    EQ              reduce using rule 5 (proposition -> expression LT expression .)
    NEQ             reduce using rule 5 (proposition -> expression LT expression .)
    $end            reduce using rule 5 (proposition -> expression LT expression .)
    RPAREN          reduce using rule 5 (proposition -> expression LT expression .)
    ADD             shift and go to state 24
    SUB             shift and go to state 25
    MUL             shift and go to state 26
    DIV             shift and go to state 27
    POWER           shift and go to state 28


state 40

    (6) proposition -> expression LE expression .
    (19) expression -> expression . ADD expression
    (20) expression -> expression . SUB expression
    (21) expression -> expression . MUL expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . POWER expression

    AND             reduce using rule 6 (proposition -> expression LE expression .)
    OR              reduce using rule 6 (proposition -> expression LE expression .)
    IMPLY           reduce using rule 6 (proposition -> expression LE expression .)
    EQ              reduce using rule 6 (proposition -> expression LE expression .)
    NEQ             reduce using rule 6 (proposition -> expression LE expression .)
    $end            reduce using rule 6 (proposition -> expression LE expression .)
    RPAREN          reduce using rule 6 (proposition -> expression LE expression .)
    ADD             shift and go to state 24
    SUB             shift and go to state 25
    MUL             shift and go to state 26
    DIV             shift and go to state 27
    POWER           shift and go to state 28


state 41

    (7) proposition -> expression EQ expression .
    (19) expression -> expression . ADD expression
    (20) expression -> expression . SUB expression
    (21) expression -> expression . MUL expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . POWER expression
    (3) proposition -> expression . GE expression
    (4) proposition -> expression . GT expression
    (5) proposition -> expression . LT expression
    (6) proposition -> expression . LE expression
    (7) proposition -> expression . EQ expression
    (8) proposition -> expression . NEQ expression
    (12) proposition -> expression . EQ proposition
    (13) proposition -> expression . NEQ proposition

    AND             reduce using rule 7 (proposition -> expression EQ expression .)
    OR              reduce using rule 7 (proposition -> expression EQ expression .)
    IMPLY           reduce using rule 7 (proposition -> expression EQ expression .)
    EQ              reduce using rule 7 (proposition -> expression EQ expression .)
    NEQ             reduce using rule 7 (proposition -> expression EQ expression .)
    $end            reduce using rule 7 (proposition -> expression EQ expression .)
    RPAREN          reduce using rule 7 (proposition -> expression EQ expression .)
    ADD             shift and go to state 24
    SUB             shift and go to state 25
    MUL             shift and go to state 26
    DIV             shift and go to state 27
    POWER           shift and go to state 28
    GE              shift and go to state 18
    GT              shift and go to state 19
    LT              shift and go to state 20
    LE              shift and go to state 21

  ! EQ              [ shift and go to state 22 ]
  ! NEQ             [ shift and go to state 23 ]


state 42

    (12) proposition -> expression EQ proposition .
    (9) proposition -> proposition . AND proposition
    (10) proposition -> proposition . OR proposition
    (11) proposition -> proposition . IMPLY proposition
    (14) proposition -> proposition . EQ expression
    (15) proposition -> proposition . NEQ expression

    AND             reduce using rule 12 (proposition -> expression EQ proposition .)
    OR              reduce using rule 12 (proposition -> expression EQ proposition .)
    IMPLY           reduce using rule 12 (proposition -> expression EQ proposition .)
    EQ              reduce using rule 12 (proposition -> expression EQ proposition .)
    NEQ             reduce using rule 12 (proposition -> expression EQ proposition .)
    $end            reduce using rule 12 (proposition -> expression EQ proposition .)
    RPAREN          reduce using rule 12 (proposition -> expression EQ proposition .)

  ! AND             [ shift and go to state 11 ]
  ! OR              [ shift and go to state 12 ]
  ! IMPLY           [ shift and go to state 13 ]
  ! EQ              [ shift and go to state 14 ]
  ! NEQ             [ shift and go to state 15 ]


state 43

    (26) expression -> LPAREN . expression RPAREN
    (16) proposition -> LPAREN . proposition RPAREN
    (19) expression -> . expression ADD expression
    (20) expression -> . expression SUB expression
    (21) expression -> . expression MUL expression
    (22) expression -> . expression DIV expression
    (23) expression -> . expression POWER expression
    (24) expression -> . constant
    (25) expression -> . symbol
    (26) expression -> . LPAREN expression RPAREN
    (1) proposition -> . NOT proposition
    (2) proposition -> . NOT expression
    (3) proposition -> . expression GE expression
    (4) proposition -> . expression GT expression
    (5) proposition -> . expression LT expression
    (6) proposition -> . expression LE expression
    (7) proposition -> . expression EQ expression
    (8) proposition -> . expression NEQ expression
    (9) proposition -> . proposition AND proposition
    (10) proposition -> . proposition OR proposition
    (11) proposition -> . proposition IMPLY proposition
    (12) proposition -> . expression EQ proposition
    (13) proposition -> . expression NEQ proposition
    (14) proposition -> . proposition EQ expression
    (15) proposition -> . proposition NEQ expression
    (16) proposition -> . LPAREN proposition RPAREN
    (17) proposition -> . TRUE
    (18) proposition -> . FALSE
    (28) constant -> . CONSTANT
    (27) symbol -> . LITERAL

    LPAREN          shift and go to state 43
    NOT             shift and go to state 2
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6
    CONSTANT        shift and go to state 9
    LITERAL         shift and go to state 10

    expression                     shift and go to state 54
    proposition                    shift and go to state 29
    constant                       shift and go to state 7
    symbol                         shift and go to state 8

state 44

    (8) proposition -> expression NEQ expression .
    (19) expression -> expression . ADD expression
    (20) expression -> expression . SUB expression
    (21) expression -> expression . MUL expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . POWER expression
    (3) proposition -> expression . GE expression
    (4) proposition -> expression . GT expression
    (5) proposition -> expression . LT expression
    (6) proposition -> expression . LE expression
    (7) proposition -> expression . EQ expression
    (8) proposition -> expression . NEQ expression
    (12) proposition -> expression . EQ proposition
    (13) proposition -> expression . NEQ proposition

    AND             reduce using rule 8 (proposition -> expression NEQ expression .)
    OR              reduce using rule 8 (proposition -> expression NEQ expression .)
    IMPLY           reduce using rule 8 (proposition -> expression NEQ expression .)
    EQ              reduce using rule 8 (proposition -> expression NEQ expression .)
    NEQ             reduce using rule 8 (proposition -> expression NEQ expression .)
    $end            reduce using rule 8 (proposition -> expression NEQ expression .)
    RPAREN          reduce using rule 8 (proposition -> expression NEQ expression .)
    ADD             shift and go to state 24
    SUB             shift and go to state 25
    MUL             shift and go to state 26
    DIV             shift and go to state 27
    POWER           shift and go to state 28
    GE              shift and go to state 18
    GT              shift and go to state 19
    LT              shift and go to state 20
    LE              shift and go to state 21

  ! EQ              [ shift and go to state 22 ]
  ! NEQ             [ shift and go to state 23 ]


state 45

    (13) proposition -> expression NEQ proposition .
    (9) proposition -> proposition . AND proposition
    (10) proposition -> proposition . OR proposition
    (11) proposition -> proposition . IMPLY proposition
    (14) proposition -> proposition . EQ expression
    (15) proposition -> proposition . NEQ expression

    AND             reduce using rule 13 (proposition -> expression NEQ proposition .)
    OR              reduce using rule 13 (proposition -> expression NEQ proposition .)
    IMPLY           reduce using rule 13 (proposition -> expression NEQ proposition .)
    EQ              reduce using rule 13 (proposition -> expression NEQ proposition .)
    NEQ             reduce using rule 13 (proposition -> expression NEQ proposition .)
    $end            reduce using rule 13 (proposition -> expression NEQ proposition .)
    RPAREN          reduce using rule 13 (proposition -> expression NEQ proposition .)

  ! AND             [ shift and go to state 11 ]
  ! OR              [ shift and go to state 12 ]
  ! IMPLY           [ shift and go to state 13 ]
  ! EQ              [ shift and go to state 14 ]
  ! NEQ             [ shift and go to state 15 ]


state 46

    (19) expression -> expression ADD expression .
    (19) expression -> expression . ADD expression
    (20) expression -> expression . SUB expression
    (21) expression -> expression . MUL expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . POWER expression

    GE              reduce using rule 19 (expression -> expression ADD expression .)
    GT              reduce using rule 19 (expression -> expression ADD expression .)
    LT              reduce using rule 19 (expression -> expression ADD expression .)
    LE              reduce using rule 19 (expression -> expression ADD expression .)
    EQ              reduce using rule 19 (expression -> expression ADD expression .)
    NEQ             reduce using rule 19 (expression -> expression ADD expression .)
    ADD             reduce using rule 19 (expression -> expression ADD expression .)
    SUB             reduce using rule 19 (expression -> expression ADD expression .)
    AND             reduce using rule 19 (expression -> expression ADD expression .)
    OR              reduce using rule 19 (expression -> expression ADD expression .)
    IMPLY           reduce using rule 19 (expression -> expression ADD expression .)
    $end            reduce using rule 19 (expression -> expression ADD expression .)
    RPAREN          reduce using rule 19 (expression -> expression ADD expression .)
    MUL             shift and go to state 26
    DIV             shift and go to state 27
    POWER           shift and go to state 28

  ! MUL             [ reduce using rule 19 (expression -> expression ADD expression .) ]
  ! DIV             [ reduce using rule 19 (expression -> expression ADD expression .) ]
  ! POWER           [ reduce using rule 19 (expression -> expression ADD expression .) ]
  ! ADD             [ shift and go to state 24 ]
  ! SUB             [ shift and go to state 25 ]


state 47

    (20) expression -> expression SUB expression .
    (19) expression -> expression . ADD expression
    (20) expression -> expression . SUB expression
    (21) expression -> expression . MUL expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . POWER expression

    GE              reduce using rule 20 (expression -> expression SUB expression .)
    GT              reduce using rule 20 (expression -> expression SUB expression .)
    LT              reduce using rule 20 (expression -> expression SUB expression .)
    LE              reduce using rule 20 (expression -> expression SUB expression .)
    EQ              reduce using rule 20 (expression -> expression SUB expression .)
    NEQ             reduce using rule 20 (expression -> expression SUB expression .)
    ADD             reduce using rule 20 (expression -> expression SUB expression .)
    SUB             reduce using rule 20 (expression -> expression SUB expression .)
    AND             reduce using rule 20 (expression -> expression SUB expression .)
    OR              reduce using rule 20 (expression -> expression SUB expression .)
    IMPLY           reduce using rule 20 (expression -> expression SUB expression .)
    $end            reduce using rule 20 (expression -> expression SUB expression .)
    RPAREN          reduce using rule 20 (expression -> expression SUB expression .)
    MUL             shift and go to state 26
    DIV             shift and go to state 27
    POWER           shift and go to state 28

  ! MUL             [ reduce using rule 20 (expression -> expression SUB expression .) ]
  ! DIV             [ reduce using rule 20 (expression -> expression SUB expression .) ]
  ! POWER           [ reduce using rule 20 (expression -> expression SUB expression .) ]
  ! ADD             [ shift and go to state 24 ]
  ! SUB             [ shift and go to state 25 ]


state 48

    (21) expression -> expression MUL expression .
    (19) expression -> expression . ADD expression
    (20) expression -> expression . SUB expression
    (21) expression -> expression . MUL expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . POWER expression

    GE              reduce using rule 21 (expression -> expression MUL expression .)
    GT              reduce using rule 21 (expression -> expression MUL expression .)
    LT              reduce using rule 21 (expression -> expression MUL expression .)
    LE              reduce using rule 21 (expression -> expression MUL expression .)
    EQ              reduce using rule 21 (expression -> expression MUL expression .)
    NEQ             reduce using rule 21 (expression -> expression MUL expression .)
    ADD             reduce using rule 21 (expression -> expression MUL expression .)
    SUB             reduce using rule 21 (expression -> expression MUL expression .)
    MUL             reduce using rule 21 (expression -> expression MUL expression .)
    DIV             reduce using rule 21 (expression -> expression MUL expression .)
    AND             reduce using rule 21 (expression -> expression MUL expression .)
    OR              reduce using rule 21 (expression -> expression MUL expression .)
    IMPLY           reduce using rule 21 (expression -> expression MUL expression .)
    $end            reduce using rule 21 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 21 (expression -> expression MUL expression .)
    POWER           shift and go to state 28

  ! POWER           [ reduce using rule 21 (expression -> expression MUL expression .) ]
  ! ADD             [ shift and go to state 24 ]
  ! SUB             [ shift and go to state 25 ]
  ! MUL             [ shift and go to state 26 ]
  ! DIV             [ shift and go to state 27 ]


state 49

    (22) expression -> expression DIV expression .
    (19) expression -> expression . ADD expression
    (20) expression -> expression . SUB expression
    (21) expression -> expression . MUL expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . POWER expression

    GE              reduce using rule 22 (expression -> expression DIV expression .)
    GT              reduce using rule 22 (expression -> expression DIV expression .)
    LT              reduce using rule 22 (expression -> expression DIV expression .)
    LE              reduce using rule 22 (expression -> expression DIV expression .)
    EQ              reduce using rule 22 (expression -> expression DIV expression .)
    NEQ             reduce using rule 22 (expression -> expression DIV expression .)
    ADD             reduce using rule 22 (expression -> expression DIV expression .)
    SUB             reduce using rule 22 (expression -> expression DIV expression .)
    MUL             reduce using rule 22 (expression -> expression DIV expression .)
    DIV             reduce using rule 22 (expression -> expression DIV expression .)
    AND             reduce using rule 22 (expression -> expression DIV expression .)
    OR              reduce using rule 22 (expression -> expression DIV expression .)
    IMPLY           reduce using rule 22 (expression -> expression DIV expression .)
    $end            reduce using rule 22 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 22 (expression -> expression DIV expression .)
    POWER           shift and go to state 28

  ! POWER           [ reduce using rule 22 (expression -> expression DIV expression .) ]
  ! ADD             [ shift and go to state 24 ]
  ! SUB             [ shift and go to state 25 ]
  ! MUL             [ shift and go to state 26 ]
  ! DIV             [ shift and go to state 27 ]


state 50

    (23) expression -> expression POWER expression .
    (19) expression -> expression . ADD expression
    (20) expression -> expression . SUB expression
    (21) expression -> expression . MUL expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . POWER expression

    GE              reduce using rule 23 (expression -> expression POWER expression .)
    GT              reduce using rule 23 (expression -> expression POWER expression .)
    LT              reduce using rule 23 (expression -> expression POWER expression .)
    LE              reduce using rule 23 (expression -> expression POWER expression .)
    EQ              reduce using rule 23 (expression -> expression POWER expression .)
    NEQ             reduce using rule 23 (expression -> expression POWER expression .)
    ADD             reduce using rule 23 (expression -> expression POWER expression .)
    SUB             reduce using rule 23 (expression -> expression POWER expression .)
    MUL             reduce using rule 23 (expression -> expression POWER expression .)
    DIV             reduce using rule 23 (expression -> expression POWER expression .)
    POWER           reduce using rule 23 (expression -> expression POWER expression .)
    AND             reduce using rule 23 (expression -> expression POWER expression .)
    OR              reduce using rule 23 (expression -> expression POWER expression .)
    IMPLY           reduce using rule 23 (expression -> expression POWER expression .)
    $end            reduce using rule 23 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 23 (expression -> expression POWER expression .)

  ! ADD             [ shift and go to state 24 ]
  ! SUB             [ shift and go to state 25 ]
  ! MUL             [ shift and go to state 26 ]
  ! DIV             [ shift and go to state 27 ]
  ! POWER           [ shift and go to state 28 ]


state 51

    (16) proposition -> LPAREN proposition RPAREN .

    AND             reduce using rule 16 (proposition -> LPAREN proposition RPAREN .)
    OR              reduce using rule 16 (proposition -> LPAREN proposition RPAREN .)
    IMPLY           reduce using rule 16 (proposition -> LPAREN proposition RPAREN .)
    EQ              reduce using rule 16 (proposition -> LPAREN proposition RPAREN .)
    NEQ             reduce using rule 16 (proposition -> LPAREN proposition RPAREN .)
    $end            reduce using rule 16 (proposition -> LPAREN proposition RPAREN .)
    RPAREN          reduce using rule 16 (proposition -> LPAREN proposition RPAREN .)


state 52

    (26) expression -> LPAREN expression RPAREN .

    GE              reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    ADD             reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    SUB             reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    IMPLY           reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 26 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 26 (expression -> LPAREN expression RPAREN .)


state 53

    (26) expression -> LPAREN expression . RPAREN
    (19) expression -> expression . ADD expression
    (20) expression -> expression . SUB expression
    (21) expression -> expression . MUL expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . POWER expression

    RPAREN          shift and go to state 52
    ADD             shift and go to state 24
    SUB             shift and go to state 25
    MUL             shift and go to state 26
    DIV             shift and go to state 27
    POWER           shift and go to state 28


state 54

    (26) expression -> LPAREN expression . RPAREN
    (19) expression -> expression . ADD expression
    (20) expression -> expression . SUB expression
    (21) expression -> expression . MUL expression
    (22) expression -> expression . DIV expression
    (23) expression -> expression . POWER expression
    (3) proposition -> expression . GE expression
    (4) proposition -> expression . GT expression
    (5) proposition -> expression . LT expression
    (6) proposition -> expression . LE expression
    (7) proposition -> expression . EQ expression
    (8) proposition -> expression . NEQ expression
    (12) proposition -> expression . EQ proposition
    (13) proposition -> expression . NEQ proposition

    RPAREN          shift and go to state 52
    ADD             shift and go to state 24
    SUB             shift and go to state 25
    MUL             shift and go to state 26
    DIV             shift and go to state 27
    POWER           shift and go to state 28
    GE              shift and go to state 18
    GT              shift and go to state 19
    LT              shift and go to state 20
    LE              shift and go to state 21
    EQ              shift and go to state 22
    NEQ             shift and go to state 23

